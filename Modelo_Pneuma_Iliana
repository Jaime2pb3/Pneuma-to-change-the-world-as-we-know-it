{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "uOnSKHy4k79g"
   },
   "source": [
    "## Modelo Pneuma-Iliana \n",
    "# Interpretation and learning inferred by adaptive neural algorithm)\n",
    "\n",
    "# Reconstrucción neuronal adaptativa avanzada"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {
    "id": "d1u3fn0xk79h"
   },
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import pandas as pd\n",
    "import matplotlib.pyplot as plt\n",
    "import torch\n",
    "from lion_pytorch import Lion \n",
    "from sklearn.metrics.pairwise import cosine_similarity\n",
    "from sklearn.neighbors import NearestNeighbors\n",
    "from tensorflow.keras.models import Model\n",
    "from tensorflow.keras.layers import Input, Dense\n",
    "from tensorflow.keras.optimizers import Adam\n",
    "\n",
    "def get_optimizer(model, optimizer_name='adamw', lr=1e-4, weight_decay=1e-2):\n",
    "    if optimizer_name.lower() == 'adamw':\n",
    "        return torch.optim.AdamW(model.parameters(), lr=lr, weight_decay=weight_decay)\n",
    "    elif optimizer_name.lower() == 'lion':\n",
    "        return Lion(model.parameters(), lr=lr, weight_decay=weight_decay)\n",
    "    else:\n",
    "        raise ValueError(f\"Unsupported optimizer: {optimizer_name}\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "7HDx0pCBk79i"
   },
   "source": [
    "## Fractalización Frecuencial"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {
    "id": "pT6oEET5k79i"
   },
   "outputs": [],
   "source": [
    "def fractalizar_frecuencia(vector):\n",
    "    return np.clip(np.sin(np.pi * vector * 3) + vector * 0.5, 0, 1)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "wVgiCzTYk79i"
   },
   "source": [
    "## Dataset de Frecuencias Neuronales"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 206
    },
    "id": "iUH24g58k79i",
    "outputId": "af8d6514-a4ad-42dc-8ac4-b6e268e6c6aa"
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Región</th>\n",
       "      <th>Delta_Sano</th>\n",
       "      <th>Theta_Sano</th>\n",
       "      <th>Alpha_Sano</th>\n",
       "      <th>Beta_Sano</th>\n",
       "      <th>Gamma_Sano</th>\n",
       "      <th>Delta_AD</th>\n",
       "      <th>Theta_AD</th>\n",
       "      <th>Alpha_AD</th>\n",
       "      <th>Beta_AD</th>\n",
       "      <th>Gamma_AD</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Frontal</td>\n",
       "      <td>0.25</td>\n",
       "      <td>0.30</td>\n",
       "      <td>0.70</td>\n",
       "      <td>0.50</td>\n",
       "      <td>0.60</td>\n",
       "      <td>0.55</td>\n",
       "      <td>0.45</td>\n",
       "      <td>0.42</td>\n",
       "      <td>0.40</td>\n",
       "      <td>0.52</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Parietal</td>\n",
       "      <td>0.20</td>\n",
       "      <td>0.28</td>\n",
       "      <td>0.65</td>\n",
       "      <td>0.55</td>\n",
       "      <td>0.62</td>\n",
       "      <td>0.50</td>\n",
       "      <td>0.42</td>\n",
       "      <td>0.39</td>\n",
       "      <td>0.42</td>\n",
       "      <td>0.50</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Temporal</td>\n",
       "      <td>0.18</td>\n",
       "      <td>0.25</td>\n",
       "      <td>0.68</td>\n",
       "      <td>0.52</td>\n",
       "      <td>0.61</td>\n",
       "      <td>0.53</td>\n",
       "      <td>0.40</td>\n",
       "      <td>0.41</td>\n",
       "      <td>0.39</td>\n",
       "      <td>0.48</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Occipital</td>\n",
       "      <td>0.15</td>\n",
       "      <td>0.23</td>\n",
       "      <td>0.60</td>\n",
       "      <td>0.48</td>\n",
       "      <td>0.58</td>\n",
       "      <td>0.48</td>\n",
       "      <td>0.38</td>\n",
       "      <td>0.36</td>\n",
       "      <td>0.37</td>\n",
       "      <td>0.46</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Central</td>\n",
       "      <td>0.22</td>\n",
       "      <td>0.29</td>\n",
       "      <td>0.72</td>\n",
       "      <td>0.54</td>\n",
       "      <td>0.63</td>\n",
       "      <td>0.52</td>\n",
       "      <td>0.44</td>\n",
       "      <td>0.43</td>\n",
       "      <td>0.41</td>\n",
       "      <td>0.51</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "      Región  Delta_Sano  Theta_Sano  Alpha_Sano  Beta_Sano  Gamma_Sano  \\\n",
       "0    Frontal        0.25        0.30        0.70       0.50        0.60   \n",
       "1   Parietal        0.20        0.28        0.65       0.55        0.62   \n",
       "2   Temporal        0.18        0.25        0.68       0.52        0.61   \n",
       "3  Occipital        0.15        0.23        0.60       0.48        0.58   \n",
       "4    Central        0.22        0.29        0.72       0.54        0.63   \n",
       "\n",
       "   Delta_AD  Theta_AD  Alpha_AD  Beta_AD  Gamma_AD  \n",
       "0      0.55      0.45      0.42     0.40      0.52  \n",
       "1      0.50      0.42      0.39     0.42      0.50  \n",
       "2      0.53      0.40      0.41     0.39      0.48  \n",
       "3      0.48      0.38      0.36     0.37      0.46  \n",
       "4      0.52      0.44      0.43     0.41      0.51  "
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data = { 'Región': ['Frontal', 'Parietal', 'Temporal', 'Occipital', 'Central'],\n",
    "'Delta_Sano':[0.25,0.20,0.18,0.15,0.22],'Theta_Sano':[0.30,0.28,0.25,0.23,0.29],'Alpha_Sano':[0.70,0.65,0.68,0.60,0.72],\n",
    "'Beta_Sano':[0.50,0.55,0.52,0.48,0.54],'Gamma_Sano':[0.60,0.62,0.61,0.58,0.63],\n",
    "'Delta_AD':[0.55,0.50,0.53,0.48,0.52],'Theta_AD':[0.45,0.42,0.40,0.38,0.44],'Alpha_AD':[0.42,0.39,0.41,0.36,0.43],\n",
    "'Beta_AD':[0.40,0.42,0.39,0.37,0.41],'Gamma_AD':[0.52,0.50,0.48,0.46,0.51] }\n",
    "df = pd.DataFrame(data)\n",
    "df"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "RzH8_9f-k79i"
   },
   "source": [
    "## Entrenamiento de autoencoder con los Optimizadores Adam y AdamW para refinamiento del aprendizaje"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {
    "id": "t5-UO_Urk79i"
   },
   "outputs": [],
   "source": [
    "X_sano, X_ad = df.iloc[:, 1:6].values, df.iloc[:, 6:].values\n",
    "input_dim = X_sano.shape[1]\n",
    "input_layer = Input(shape=(input_dim,))\n",
    "encoded = Dense(3, activation='relu')(input_layer)\n",
    "decoded = Dense(input_dim, activation='sigmoid')(encoded)\n",
    "autoencoder = Model(input_layer, decoded)\n",
    "autoencoder.compile(optimizer=Adam(0.01), loss='mse')\n",
    "history = autoencoder.fit(X_sano, X_sano, epochs=10000, verbose=0)\n",
    "autoencoder.compile(optimizer = AdamW(learning_rate=0.001, weight_decay=1e-5), loss='mse')\n",
    "history_fine = autoencoder.fit(X_sano, X_sano, epochs=10000, verbose=0)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "emTgEPCqk79i"
   },
   "source": [
    "## Visualización explícita de pérdida (Loss)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 489
    },
    "id": "lKAu6Uyyk79j",
    "outputId": "84747cb8-692d-4978-bde6-cd8145c8b847"
   },
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1000x500 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure(figsize=(10,5))\n",
    "plt.plot(history.history['loss'] + history_fine.history['loss'], label='Pérdida (Loss)')\n",
    "plt.title('Pérdida del Entrenamiento del Autoencoder')\n",
    "plt.xlabel('Época'); plt.ylabel('Loss'); plt.legend()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "39R2-M3Hk79j"
   },
   "source": [
    "## Reconstrucción con Levofrecuencia Adaptativa"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {
    "id": "wR5bKphkk79j"
   },
   "outputs": [],
   "source": [
    "def levofrecuencia_adaptativa(vec,ae,orig,e=25,d=0.05,lr=0.1):\n",
    "    best, best_cos, mod, delta = vec, 0, vec.copy(), d\n",
    "    for _ in range(e):\n",
    "        mod = np.clip(-mod + np.random.uniform(-delta,delta,vec.shape) + 0.1*np.sin(2*np.pi*mod),0,1)\n",
    "        rec = ae.predict(mod.reshape(1,-1),verbose=0)\n",
    "        cos = cosine_similarity(orig.reshape(1,-1), rec)[0,0]\n",
    "        if cos>best_cos: best_cos, best = cos, mod\n",
    "        delta*=(1-cos)*lr\n",
    "    return best"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "4z8do0Dsk79j"
   },
   "source": [
    "## Localización Explícita de Redes Alternas (Informacion Inaccesible o deteriorada)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {
    "id": "8sHt1ZsGk79j"
   },
   "outputs": [],
   "source": [
    "neighbors = NearestNeighbors(n_neighbors=1).fit(X_sano)\n",
    "reconstrucciones,resonancias=[],[]\n",
    "for i,original in enumerate(X_ad):\n",
    "    rec=autoencoder.predict(original.reshape(1,-1),verbose=0)\n",
    "    cos=cosine_similarity(original.reshape(1,-1),rec)[0][0]\n",
    "    if cos<0.98:\n",
    "        mod=levofrecuencia_adaptativa(rec[0],autoencoder,original)\n",
    "        rec_mod=autoencoder.predict(mod.reshape(1,-1),verbose=0)\n",
    "        cos_mod=cosine_similarity(original.reshape(1,-1),rec_mod)[0][0]\n",
    "        if cos_mod<0.98:\n",
    "            _,idx=neighbors.kneighbors(rec_mod)\n",
    "            rec_mod=X_sano[idx[0][0]]\n",
    "        reconstrucciones.append(rec_mod)\n",
    "        resonancias.append(max(cos,cos_mod))\n",
    "    else:\n",
    "        reconstrucciones.append(rec)\n",
    "        resonancias.append(cos)\n",
    "reconstrucciones=np.array(reconstrucciones)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Análisis de pérdidas post-entrenamiento"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 601
    },
    "id": "qm_09ivOoqxA",
    "outputId": "9b557c07-7eef-4880-ce83-62cf02cbe51f"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "📉 Pérdida mínima: 0.000066 en época 19619\n",
      "🔚 Pérdida final: 0.000066\n",
      "🧾 Total de épocas: 20000\n",
      "⚖️ Diferencia entre pérdida final y mínima: 0.00000000\n",
      "⚠️ Tardó en converger. Considera ajustar el optimizador o lr.\n"
     ]
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1000x500 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "full_loss = history.history['loss'] + history_fine.history['loss']\n",
    "min_loss = min(full_loss)\n",
    "min_epoch = full_loss.index(min_loss)\n",
    "final_loss = full_loss[-1]\n",
    "total_epochs = len(full_loss)\n",
    "\n",
    "# Reporte rápido\n",
    "print(f\"📉 Pérdida mínima: {min_loss:.6f} en época {min_epoch}\")\n",
    "print(f\"🔚 Pérdida final: {final_loss:.6f}\")\n",
    "print(f\"🧾 Total de épocas: {total_epochs}\")\n",
    "print(f\"⚖️ Diferencia entre pérdida final y mínima: {abs(final_loss - min_loss):.8f}\")\n",
    "\n",
    "if min_epoch < total_epochs * 0.3:\n",
    "    print(\"✅ Convergió rápido. El modelo aprendió bien desde temprano.\")\n",
    "else:\n",
    "    print(\"⚠️ Tardó en converger. Considera ajustar el optimizador o lr.\")\n",
    "\n",
    "# Gráfica clara y marcada\n",
    "plt.figure(figsize=(10, 5))\n",
    "plt.plot(full_loss, label='Loss total', color='royalblue')\n",
    "plt.axvline(x=min_epoch, linestyle='--', color='red', label=f'Época mínima: {min_epoch}')\n",
    "plt.title('Análisis Final de Pérdida del Autoencoder')\n",
    "plt.xlabel('Época')\n",
    "plt.ylabel('Loss')\n",
    "plt.legend()\n",
    "plt.grid(True)\n",
    "plt.tight_layout()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Reconstrucción del conjunto original (Calculo de Similitud Coseno)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "0GBUw1-KpRLp",
    "outputId": "e3883e87-d912-46a9-ac66-c4a4ee443194"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 46ms/step\n",
      "📌 Similitud promedio global: 0.999870\n",
      "🔺 Máxima similitud: 0.999998\n",
      "🔻 Mínima similitud: 0.999695\n",
      "\n",
      "🧠 Similitud por vector (primeros 10):\n",
      "  [0] → 0.999961\n",
      "  [1] → 0.999695\n",
      "  [2] → 0.999773\n",
      "  [3] → 0.999998\n",
      "  [4] → 0.999925\n"
     ]
    }
   ],
   "source": [
    "from sklearn.metrics.pairwise import cosine_similarity\n",
    "import numpy as np\n",
    "\n",
    "X_reconstruido = autoencoder.predict(X_sano)\n",
    "similitudes = []\n",
    "for i in range(len(X_sano)):\n",
    "    sim = cosine_similarity(X_sano[i].reshape(1, -1), X_reconstruido[i].reshape(1, -1))[0][0]\n",
    "    similitudes.append(sim)\n",
    "\n",
    "similitudes = np.array(similitudes)\n",
    "print(f\"📌 Similitud promedio global: {np.mean(similitudes):.6f}\")\n",
    "print(f\"🔺 Máxima similitud: {np.max(similitudes):.6f}\")\n",
    "print(f\"🔻 Mínima similitud: {np.min(similitudes):.6f}\")\n",
    "\n",
    "print(\"\\n Similitud por vector (primeros 10):\")\n",
    "for i, sim in enumerate(similitudes[:10]):\n",
    "    print(f\"  [{i}] → {sim:.6f}\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Registro de Métricas y Early Stoping "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "import torch\n",
    "import os\n",
    "\n",
    "train_losses = []\n",
    "val_losses = []\n",
    "\n",
    "class EarlyStopping:\n",
    "    def __init__(self, patience=5, delta=1e-4):\n",
    "        self.patience = patience\n",
    "        self.counter = 0\n",
    "        self.best_loss = None\n",
    "        self.early_stop = False\n",
    "        self.delta = delta\n",
    "\n",
    "    def __call__(self, val_loss):\n",
    "        if self.best_loss is None or val_loss < self.best_loss - self.delta:\n",
    "            self.best_loss = val_loss\n",
    "            self.counter = 0\n",
    "        else:\n",
    "            self.counter += 1\n",
    "            if self.counter >= self.patience:\n",
    "                self.early_stop = True\n",
    "\n",
    "# Función para graficar los resultados\n",
    "def plot_losses(train_losses, val_losses):\n",
    "    plt.figure(figsize=(10, 5))\n",
    "    plt.plot(train_losses, label='Training Loss')\n",
    "    plt.plot(val_losses, label='Validation Loss')\n",
    "    plt.xlabel('Epoch')\n",
    "    plt.ylabel('Loss')\n",
    "    plt.title('Training vs Validation Loss')\n",
    "    plt.legend()\n",
    "    plt.grid(True)\n",
    "    plt.show()\n",
    "\n",
    "def save_model(model, path=\"modelo_entrenado.pth\"):\n",
    "    torch.save(model.state_dict(), path)\n",
    "    print(f\"Modelo guardado en: {os.path.abspath(path)}\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Reconstruccion del conjunto original, con capas de ruido agregadas"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 33ms/step\n"
     ]
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1000x400 with 10 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 17ms/step\n",
      "📌 Similitud promedio global: 0.994870\n",
      "🔺 Máxima similitud: 0.999714\n",
      "🔻 Mínima similitud: 0.990798\n",
      "📌 Similitud promedio global: 0.994870\n",
      "🔺 Máxima similitud: 0.999714\n",
      "🔻 Mínima similitud: 0.990798\n",
      "\n",
      "🧠 Similitud por vector (primeros 10):\n",
      "  [0] → 0.995651\n",
      "  [1] → 0.999714\n",
      "  [2] → 0.990798\n",
      "  [3] → 0.992096\n",
      "  [4] → 0.996092\n"
     ]
    }
   ],
   "source": [
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "from sklearn.metrics.pairwise import cosine_similarity\n",
    "\n",
    "X_test_nuevo = X_sano.copy()\n",
    "ruido_fuerte = np.random.normal(loc=0.0, scale=0.05, size=X_test_nuevo.shape)\n",
    "X_test_nuevo += ruido_fuerte\n",
    "X_test_nuevo = np.clip(X_test_nuevo, 0, 1)\n",
    "\n",
    "reconstruccion_fuerte = autoencoder.predict(X_test_nuevo)\n",
    "sample_shape = X_test_nuevo.shape[1]\n",
    "\n",
    "if np.sqrt(sample_shape).is_integer():\n",
    "    side = int(np.sqrt(sample_shape))\n",
    "    reshape_dims = (side, side)\n",
    "else:\n",
    "    reshape_dims = (1, sample_shape)\n",
    "\n",
    "n = 5\n",
    "plt.figure(figsize=(10, 4))\n",
    "for i in range(n):\n",
    "    ax = plt.subplot(2, n, i + 1)\n",
    "    plt.imshow(X_test_nuevo[i].reshape(reshape_dims), cmap=\"gray\")\n",
    "    plt.title(\"Input ruidoso\")\n",
    "    plt.axis(\"off\")\n",
    "\n",
    "    ax = plt.subplot(2, n, i + 1 + n)\n",
    "    plt.imshow(reconstruccion_fuerte[i].reshape(reshape_dims), cmap=\"gray\")\n",
    "    plt.title(\"Reconstrucción\")\n",
    "    plt.axis(\"off\")\n",
    "\n",
    "plt.tight_layout()\n",
    "plt.show()\n",
    "\n",
    "reconstruccion_fuerte = autoencoder.predict(X_test_nuevo)\n",
    "\n",
    "similitudes = []\n",
    "for i in range(len(X_test_nuevo)):\n",
    "    sim = cosine_similarity(X_test_nuevo[i].reshape(1, -1), reconstruccion_fuerte[i].reshape(1, -1))[0][0]\n",
    "    similitudes.append(sim)\n",
    "\n",
    "similitudes = np.array(similitudes)\n",
    "print(f\"📌 Similitud promedio global: {np.mean(similitudes):.6f}\")\n",
    "print(f\"🔺 Máxima similitud: {np.max(similitudes):.6f}\")\n",
    "print(f\"🔻 Mínima similitud: {np.min(similitudes):.6f}\")\n",
    "similitudes = np.array(similitudes)\n",
    "print(f\"📌 Similitud promedio global: {np.mean(similitudes):.6f}\")\n",
    "print(f\"🔺 Máxima similitud: {np.max(similitudes):.6f}\")\n",
    "print(f\"🔻 Mínima similitud: {np.min(similitudes):.6f}\")\n",
    "\n",
    "print(\"\\n Similitud por vector (primeros 10):\")\n",
    "for i, sim in enumerate(similitudes[:10]):\n",
    "    print(f\"  [{i}] → {sim:.6f}\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Guarda el modelo entrenado completo (estructura + pesos + config)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "WARNING:absl:You are saving your model as an HDF5 file via `model.save()` or `keras.saving.save_model(model)`. This file format is considered legacy. We recommend using instead the native Keras format, e.g. `model.save('my_model.keras')` or `keras.saving.save_model(model, 'my_model.keras')`. \n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "✅ Modelo guardado como: Neurocies_traning.h5\n",
      "✅ Pesos guardados como: Neurocies.weights.h5\n"
     ]
    }
   ],
   "source": [
    "\n",
    "autoencoder.save(\"Neurocies_traning.h5\")\n",
    "autoencoder.save_weights(\"Neurocies.weights.h5\")\n",
    "\n",
    "print(\"✅ Modelo guardado como: Neurocies_traning.h5\")\n",
    "print(\"✅ Pesos guardados como: Neurocies.weights.h5\")"
   ]
  }
 ],
 "metadata": {
  "colab": {
   "provenance": []
  },
  "kernelspec": {
   "display_name": "Python (tf_env)",
   "language": "python",
   "name": "tf_env"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
